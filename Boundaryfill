#include <GL/glut.h>
#include <iostream>

using namespace std;

// Initialize OpenGL
void myInit() {
    gluOrtho2D(0, 500, 0, 500);
    glClearColor(1, 1, 1, 1);
    glMatrixMode(GL_PROJECTION);
    glColor3f(1, 0, 0);
}

// Function to plot a pixel
void plotPixel(int x, int y, float* fill_color) {
    glColor3f(fill_color[0], fill_color[1], fill_color[2]);

    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();

    glFlush();
}

// Boundary fill algorithm
void boundaryFill(int x, int y, float* fill_color, float* boundary_color) {
    float current[3];

    // Read the current pixel color
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, current);

    // Check if the pixel is not a boundary color and not already filled
    if ((current[0] != boundary_color[0] || current[1] != boundary_color[1] || current[2] != boundary_color[2]) &&
        (current[0] != fill_color[0] || current[1] != fill_color[1] || current[2] != fill_color[2])) {

        plotPixel(x, y, fill_color);

        boundaryFill(x + 1, y, fill_color, boundary_color); // Right
        boundaryFill(x - 1, y, fill_color, boundary_color); // Left
        boundaryFill(x, y + 1, fill_color, boundary_color); // Up
        boundaryFill(x, y - 1, fill_color, boundary_color); // Down
    }
}

// Function to draw a hexagon (benzene shape)
void drawBenzene() {
    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_LINE_LOOP);
    glVertex2i(200, 100); // Bottom-left
    glVertex2i(300, 100); // Bottom-right
    glVertex2i(350, 200); // Right
    glVertex2i(300, 300); // Top-right
    glVertex2i(200, 300); // Top-left
    glVertex2i(150, 200); // Left
    glEnd();

    glFlush();

    float boundary_color[3] = {1, 0, 0}; // Red boundary
    float fill_color[3] = {0, 1, 0};     // Green fill

    boundaryFill(250, 200, fill_color, boundary_color); // Start filling from inside
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(400, 150);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutCreateWindow("Boundary Fill - Benzene");

    myInit();
    glutDisplayFunc(drawBenzene);

    glutMainLoop();
    return 0;
}
#include <GL/glut.h>
#include <iostream>

using namespace std;

// Initialize OpenGL
void myInit() {
    gluOrtho2D(0, 500, 0, 500);
    glClearColor(1, 1, 1, 1);
    glMatrixMode(GL_PROJECTION);
    glColor3f(1, 0, 0);
}

// Function to plot a pixel
void plotPixel(int x, int y, float* fill_color) {
    glColor3f(fill_color[0], fill_color[1], fill_color[2]);

    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();

    glFlush();
}

// Boundary fill algorithm
void boundaryFill(int x, int y, float* fill_color, float* boundary_color) {
    float current[3];

    // Read the current pixel color
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, current);

    // Check if the pixel is not a boundary color and not already filled
    if ((current[0] != boundary_color[0] || current[1] != boundary_color[1] || current[2] != boundary_color[2]) &&
        (current[0] != fill_color[0] || current[1] != fill_color[1] || current[2] != fill_color[2])) {

        plotPixel(x, y, fill_color);

        boundaryFill(x + 1, y, fill_color, boundary_color); // Right
        boundaryFill(x - 1, y, fill_color, boundary_color); // Left
        boundaryFill(x, y + 1, fill_color, boundary_color); // Up
        boundaryFill(x, y - 1, fill_color, boundary_color); // Down
    }
}

// Function to draw a hexagon (benzene shape)
void drawBenzene() {
    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_LINE_LOOP);
    glVertex2i(200, 100); // Bottom-left
    glVertex2i(300, 100); // Bottom-right
    glVertex2i(350, 200); // Right
    glVertex2i(300, 300); // Top-right
    glVertex2i(200, 300); // Top-left
    glVertex2i(150, 200); // Left
    glEnd();

    glFlush();

    float boundary_color[3] = {1, 0, 0}; // Red boundary
    float fill_color[3] = {0, 1, 0};     // Green fill

    boundaryFill(250, 200, fill_color, boundary_color); // Start filling from inside
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(400, 150);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutCreateWindow("Boundary Fill - Benzene");

    myInit();
    glutDisplayFunc(drawBenzene);

    glutMainLoop();
    return 0;
}
